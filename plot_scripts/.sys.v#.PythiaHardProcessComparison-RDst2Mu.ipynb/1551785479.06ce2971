{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:25:25.587319Z",
     "start_time": "2019-03-03T23:25:22.425395Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.12/06\n"
     ]
    }
   ],
   "source": [
    "import ROOT as rt\n",
    "import root_numpy as rtnp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from histo_utilities import create_TH1D, create_TH2D, std_color_list, SetMaxToMaxHist, make_ratio_plot\n",
    "from cebefo_style import Set_2D_colz_graphics\n",
    "\n",
    "import CMS_lumi, tdrstyle\n",
    "tdrstyle.setTDRStyle()\n",
    "CMS_lumi.writeExtraText = 1\n",
    "CMS_lumi.extraText = \"     Simulation Preliminary\"\n",
    "\n",
    "donotdelete = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:25:26.000880Z",
     "start_time": "2019-03-03T23:25:25.591646Z"
    }
   },
   "outputs": [],
   "source": [
    "fpath = {}\n",
    "tree = {}\n",
    "process = {}\n",
    "process_short = {}\n",
    "\n",
    "fpath['SoftQCD'] = '../data/cmsMC_private/BPH_Tag-B0_MuNuDmst-pD0bar-kp_13TeV-pythia8_SoftQCD_PTFilter5_0p0-evtgen_HQET2_central_NoPU_10-2-3_v0/BPH_Tag-B0_MuNuDmst-pD0bar-kp_13TeV-pythia8_SoftQCD_PTFilter5_0p0-evtgen_HQET2_central_BPHMCEasyRECO_merged_1-500.root'\n",
    "process['SoftQCD'] = 'Soft QCD: B_{0} #rightarrow D*^{-}#mu^{+}#nu'\n",
    "process_short['SoftQCD'] = 'Soft QCD'\n",
    "\n",
    "fpath['hardbbar_5'] = '../data/cmsMC_private/BPH_Tag-B0_MuNuDmst-pD0bar-kp_13TeV-pythia8_Hardbbbar_PTHat5p0-evtgen_HQET2_central_NoPU_10-2-3_v0/BPH_Tag-B0_MuNuDmst-pD0bar-kp_13TeV-pythia8_Hardbbbar_PTHat5p0-evtgen_HQET2_central_BPHMCEasyRECO_merged_1-500.root'\n",
    "process['hardbbar_5'] = 'Hard b#bar{b}, #hat{p}_{T} > 5 GeV: B_{0} #rightarrow D*^{-}#mu^{+}#nu'\n",
    "process_short['hardbbar_5'] = 'Hard b#bar{b}, #hat{p}_{T} > 5 GeV'\n",
    "\n",
    "fpath['hardbbar_3'] = '../data/cmsMC_private/BPH_Tag-B0_MuNuDmst-pD0bar-kp_13TeV-pythia8_Hardbbbar_PTHat3p0-evtgen_HQET2_central_NoPU_10-2-3_v0/BPH_Tag-B0_MuNuDmst-pD0bar-kp_13TeV-pythia8_Hardbbbar_PTHat3p0-evtgen_HQET2_central_BPHMCEasyRECO_1.root'\n",
    "process['hardbbar_3'] = 'Hard b#bar{b}, #hat{p}_{T} > 3 GeV: B_{0} #rightarrow D*^{-}#mu^{+}#nu'\n",
    "process_short['hardbbar_3'] = 'Hard b#bar{b}, #hat{p}_{T} > 3 GeV'\n",
    "\n",
    "for k,v in fpath.iteritems():\n",
    "    tree[k] = rtnp.root2array(v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:29:41.881900Z",
     "start_time": "2019-03-03T23:29:41.866248Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hardbbar_5\n",
      "SoftQCD\n",
      "hardbbar_3\n",
      "['BPH_NTrgObj' 'BPH_TrgObJ_matched' 'B_RECO_eta' 'B_RECO_pdgId'\n",
      " 'B_RECO_phi' 'B_RECO_pt' 'B_eta' 'B_p' 'B_p_dl' 'B_pt' 'B_pz' 'B_tau'\n",
      " 'D0_RECO_eta' 'D0_RECO_pdgId' 'D0_RECO_phi' 'D0_RECO_pt' 'D_pt_MC'\n",
      " 'D_pthat_MC' 'Dst_RECO_eta' 'Dst_RECO_pdgId' 'Dst_RECO_phi' 'Dst_RECO_pt'\n",
      " 'Est_mu_RECO' 'KReco_Nchi2' 'KReco_Nhits' 'KReco_chi2' 'KReco_dxy'\n",
      " 'KReco_dxyError' 'KReco_dz' 'KReco_dzError' 'KReco_eta' 'KReco_ndof'\n",
      " 'KReco_pdgId' 'KReco_phi' 'KReco_pt' 'K_RecoMC_dR' 'K_RecoMC_dpt' 'K_eta'\n",
      " 'K_pdgId' 'K_phi' 'K_pt' 'M2_miss_RECO' 'M_ext_MC' 'M_miss_MC' 'M_vis_MC'\n",
      " 'M_vis_RECO' 'N_neutral' 'dTheta_visB_MC' 'dl' 'muReco_Nchi2'\n",
      " 'muReco_Nhits' 'muReco_chi2' 'muReco_dxy' 'muReco_dxyError' 'muReco_dz'\n",
      " 'muReco_dzError' 'muReco_eta' 'muReco_isCaloMuon' 'muReco_isGlobalMuon'\n",
      " 'muReco_isLooseMuon' 'muReco_isMediumMuon' 'muReco_isMuon'\n",
      " 'muReco_isSoftMuon' 'muReco_isStandAloneMuon' 'muReco_isTightMuon'\n",
      " 'muReco_isTrackerMuon' 'muReco_ndof' 'muReco_pdgId' 'muReco_phi'\n",
      " 'muReco_pt' 'mu_RecoMC_dR' 'mu_RecoMC_dpt' 'mu_eta' 'mu_ip_MC' 'mu_pdgId'\n",
      " 'mu_phi' 'mu_pt' 'piReco_Nchi2' 'piReco_Nhits' 'piReco_chi2' 'piReco_dxy'\n",
      " 'piReco_dxyError' 'piReco_dz' 'piReco_dzError' 'piReco_eta' 'piReco_ndof'\n",
      " 'piReco_pdgId' 'piReco_phi' 'piReco_pt' 'pi_RecoMC_dR' 'pi_RecoMC_dpt'\n",
      " 'pi_eta' 'pi_pdgId' 'pi_phi' 'pi_pt' 'pisoftReco_Nchi2'\n",
      " 'pisoftReco_Nhits' 'pisoftReco_chi2' 'pisoftReco_dxy'\n",
      " 'pisoftReco_dxyError' 'pisoftReco_dz' 'pisoftReco_dzError'\n",
      " 'pisoftReco_eta' 'pisoftReco_ndof' 'pisoftReco_pdgId' 'pisoftReco_phi'\n",
      " 'pisoftReco_pt' 'pisoft_RecoMC_dR' 'pisoft_RecoMC_dpt' 'pisoft_eta'\n",
      " 'pisoft_pdgId' 'pisoft_phi' 'pisoft_pt' 'q2_MC' 'q2_RECO' 'trgMu_eta'\n",
      " 'trgMu_phi' 'trgMu_pt']\n"
     ]
    }
   ],
   "source": [
    "fields_name = None\n",
    "for k in tree.keys():\n",
    "    print k\n",
    "    aux_fields_name = np.sort([x[1:-8] for x in str(tree[k].dtype)[2:-2].split('), (')])\n",
    "    if fields_name is None:\n",
    "        fields_name = aux_fields_name\n",
    "    else:\n",
    "        for x1, x2 in zip(fields_name, aux_fields_name):\n",
    "            if x1 != x2:\n",
    "                print 'Tree version not compatible', k, 'with', tree.keys()[0]\n",
    "                print x1, x2\n",
    "                break\n",
    "\n",
    "print fields_name"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Overall functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:29:44.293152Z",
     "start_time": "2019-03-03T23:29:44.274074Z"
    }
   },
   "outputs": [],
   "source": [
    "def dr_dpt_plot(dpt, dr, cut = [None, None]):\n",
    "    c = rt.TCanvas('c', 'c',50,50,800,600)\n",
    "    c.SetTickx(0)\n",
    "    c.SetTicky(0)\n",
    "    x = dpt\n",
    "    y = dr\n",
    "    xbin = np.logspace(-7,2,100)\n",
    "    ybin = np.logspace(-7,1,100)\n",
    "    h2 = create_TH2D(np.column_stack((x,y)), title='', axis_title=['#left|1 - p_{T}^{RECO}/p_{T}^{MC}#right|', '#DeltaR' , ''], binning=[xbin, ybin])\n",
    "\n",
    "    h2.Draw('colz')\n",
    "    h2.GetXaxis().SetTitleOffset(1.3)\n",
    "    \n",
    "    ln = rt.TLine()\n",
    "    ln.SetLineColor(6)\n",
    "    ln.SetLineStyle(9)\n",
    "    ln.SetLineWidth(2)\n",
    "    if (not cut[0] is None) and (not cut[1] is None):\n",
    "        ln.DrawLine(cut[0], cut[1], cut[0], ybin[0])\n",
    "        ln.DrawLine(cut[0], cut[1], xbin[0], cut[1])\n",
    "    \n",
    "    c.SetLogy()\n",
    "    c.SetLogx()\n",
    "    CMS_lumi.CMS_lumi(c, -1, 0)\n",
    "    rt.gPad.SetBottomMargin(0.18)\n",
    "    rt.gPad.SetRightMargin(0.12)\n",
    "    c.hist = [h2]\n",
    "    c.Draw()\n",
    "    return c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:57:18.260289Z",
     "start_time": "2019-03-03T23:57:18.242968Z"
    }
   },
   "outputs": [],
   "source": [
    "def drawOnCMSCanvas(hl, opt='same', label=''):\n",
    "    c = rt.TCanvas('c'+label, 'c'+label,50,50,800,600)\n",
    "    c.SetTickx(0)\n",
    "    c.SetTicky(0)\n",
    "    \n",
    "    for i, o in enumerate(hl):\n",
    "        do = ''\n",
    "        if opt == 'same':\n",
    "            if i > 0:\n",
    "                do = 'SAME'\n",
    "        elif not opt is None:\n",
    "            do = opt[i]\n",
    "            \n",
    "        o.Draw(do)\n",
    "        \n",
    "    \n",
    "    CMS_lumi.CMS_lumi(c, -1, 0)\n",
    "    c.objs = [hl]\n",
    "    c.Draw()\n",
    "    return c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Muon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Trigger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:29:45.987297Z",
     "start_time": "2019-03-03T23:29:45.842107Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "out = plt.hist(tree['SoftQCD']['BPH_TrgObJ_matched'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:29:56.405333Z",
     "start_time": "2019-03-03T23:29:56.258445Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "out = plt.hist(tree['SoftQCD']['BPH_NTrgObj'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Muon matching"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distance between the Gen $\\mu$ from B decay and best matching PFCand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:30:07.586723Z",
     "start_time": "2019-03-03T23:30:07.274606Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n='SoftQCD'\n",
    "c = dr_dpt_plot(np.abs(tree[n]['mu_RecoMC_dpt']) , tree[n]['mu_RecoMC_dR'], [0.15, 0.03])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distance between the B muon and muon which triggered the event"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:52:24.703721Z",
     "start_time": "2019-03-03T23:52:24.657640Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "Warning in <TROOT::Append>: Replacing existing TH1: h (Potential memory leak).\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "t = tree['SoftQCD']\n",
    "muRECO_sel  = np.logical_and(np.abs(t['mu_RecoMC_dpt']) < 0.15 , t['mu_RecoMC_dR'] < 0.03)\n",
    "trgObgMatched_sel = t['BPH_TrgObJ_matched'] > 0\n",
    "sel = np.logical_and(muRECO_sel, trgObgMatched_sel)\n",
    "\n",
    "dpt = np.abs(1 - t['muReco_pt']/t['trgMu_pt'])\n",
    "dR = np.hypot(t['muReco_phi']-t['trgMu_phi'], t['muReco_eta']-t['trgMu_eta'])\n",
    "c = dr_dpt_plot(dpt[sel] , dR[sel], [0.01, 0.005])\n",
    "\n",
    "muB_trg_sel = np.logical_and(dpt < 0.01, dR < 0.005)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "mu_sel = {}\n",
    "for k, t in tree.iteritems():\n",
    "    muRECO_sel  = np.logical_and(np.abs(t['mu_RecoMC_dpt']) < 0.15 , t['mu_RecoMC_dR'] < 0.03)\n",
    "    sel = np.logical_and(muRECO_sel, t['BPH_TrgObJ_matched'] > 0)\n",
    "    \n",
    "    dpt = np.abs(1 - t['muReco_pt']/t['trgMu_pt'])\n",
    "    dR = np.hypot(t['muReco_phi']-t['trgMu_phi'], t['muReco_eta']-t['trgMu_eta'])\n",
    "    muB_trg_sel = np.logical_and(dpt < 0.01, dR < 0.005)\n",
    "    \n",
    "    mu_sel[k] = np.logical_and(sel, muB_trg_sel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Event variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "vars_list = {'muReco_pt':'Muon p_{T} [GeV]', \n",
    "             'q2_MC':'q^{2}_{MC} [GeV]',\n",
    "             'B_pt':'B^{0} p_{T}^{MC} [GeV]',\n",
    "             'Est_mu_RECO':'E*_{#mu} RECO'\n",
    "            }\n",
    "binning_list = {'muReco_pt':np.logspace(0,np.log10(50),50), \n",
    "                'q2_MC':[30,0,15],\n",
    "                'B_pt':np.logspace(0,2,50),\n",
    "                'Est_mu_RECO':[30,0,4]\n",
    "               }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-03T23:53:56.593300Z",
     "start_time": "2019-03-03T23:53:56.443121Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "c_list = []\n",
    "for v, label in vars_list.iteritems():\n",
    "    h_l = []\n",
    "    leg = rt.TLegend(0.7,0.7,0.97,0.92, 'B#rightarrowD*#mu#nu')\n",
    "    for ik, k in enumerate(tree.keys()):\n",
    "        #pay attention to put the right sel\n",
    "        h = create_TH1D(tree[k][v][mu_sel[k]], 'h_'+k+v, process_short[k], \n",
    "                        axis_title=[label, 'Prob'], \n",
    "                        binning=binning_list[v])\n",
    "        h.Scale(1./h.GetEntries())\n",
    "        h.SetLineColor(std_color_list[ik])\n",
    "        leg.AddEntry(h, process_short[k], 'le')\n",
    "        h_l.append(h)\n",
    "    \n",
    "    SetMaxToMaxHist(h_l)\n",
    "#     c_list.append(drawOnCMSCanvas(h_l+[leg], 'same', v))\n",
    "    c = make_ratio_plot(h_l, label=v)\n",
    "    c.Draw()\n",
    "    c_list.append(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
